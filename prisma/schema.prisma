// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  balance       Int?          @default(0)
  savings       Int?          @default(0)
  password      String
  aiTrends      String?
  aiAdvice      String?
  lastUpdatedAi DateTime?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  transcations  Transaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id         Int           @id @default(autoincrement())
  type       Type?
  name       String?
  icon       String?
  color      String        @default("#808080")
  trnsaction Transaction[]
  Challenge  Challenge[]
}

model Transaction {
  id         String   @id @default(cuid())
  date       DateTime @default(now())
  type       Type?
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  User       User?    @relation(fields: [userId], references: [id])
  amount     Int
  userId     String?
  commentary String?  @default(" ")
}

enum Type {
  IN
  OUT
}

model Challenge {
  id           Int             @id @default(autoincrement())
  name         String
  categoryId   Int
  category     Category        @relation(fields: [categoryId], references: [id])
  durationDays Int
  users        UserChallenge[]
}

model UserChallenge {
  id          Int             @id @default(autoincrement())
  userId      String
  challengeId Int
  challenge   Challenge       @relation(fields: [challengeId], references: [id])
  status      ChallengeStatus
  startDate   DateTime?
  endDate     DateTime?

  @@unique([userId, challengeId]) // Уникальная связь вызова с пользователем
}

enum ChallengeStatus {
  NEW
  IN_PROGRESS
  FAILED
  COMPLETED
}
